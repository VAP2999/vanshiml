import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow import keras
from tensorflow.keras import layers

# Load your dataset from a CSV file
file_path = r"C:\Users\pvans\Downloads\spotify-2023.csv"  # Replace with the path to your CSV file
column_names = ['valence_%', 'energy_%', 'liveness_%', 'dancebility_%']  # Replace with your column names

data = pd.read_csv(file_path, encoding='ISO-8859-1', names=column_names, header=0)  # Read CSV with specified column names

# Separate features and target based on column names
X = data.drop('dancebility_%', axis=1)  # Features
y = data['dancebility_%']  # Target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the model
model = keras.Sequential([
    layers.Dense(10, activation='relu', input_shape=(X.shape[1],)),
    layers.Dense(1)  # Output layer for regression
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])  # Using MSE loss for regression

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.1)

# Evaluate the model on the test set
test_loss, test_mae = model.evaluate(X_test, y_test)
print(f'Test MAE: {test_mae}')
#mean squared error (MSE) as the loss function for regression problems and mean absolute error (MAE) as the evaluation metric. Adjust the architecture and hyperparameters based on the specific requirements of your data and task.

# Predict on the test set and print the output
y_pred = model.predict(X_test)
print("Predicted values:", y_pred)